#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
üîç VERIFICADOR DE BACKTESTS REALES
==================================

Este script ejecuta un backtest real y luego verifica los trades
contra datos actuales de Binance para confirmar su validez.
"""

import os
import sys
import json
import requests
import pandas as pd
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple

# Agregar path para imports locales
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(current_dir)
sys.path.append(os.path.join(current_dir, 'core'))

# Imports locales
from futures_simulator import FuturesSimulator

# Configuraci√≥n b√°sica
FUTURES_CONFIG = {
    'leverage': 25,
    'initial_balance': 100,
    'commission_rate': 0.0006,
    'liquidation_threshold': 0.96,
    'min_buy_score': 55,
    'max_risk_per_trade': 0.05
}

class BacktestVerifier:
    def __init__(self):
        self.binance_api = "https://api.binance.com/api/v3/klines"
        
    def run_and_verify(self, symbol: str, timeframe: str = "4h", max_trades: int = 10):
        """Ejecutar backtest y verificar trades contra datos reales."""
        print(f"üöÄ VERIFICADOR DE BACKTEST - {symbol} {timeframe}")
        print("=" * 60)
        
        # 1. Ejecutar backtest real
        print(f"üéØ Ejecutando backtest para {symbol}...")
        trades = self._run_backtest(symbol, timeframe)
        
        if not trades or len(trades) == 0:
            print("‚ùå No se generaron trades en el backtest")
            return
        
        # Limitar trades para verificaci√≥n
        trades_to_verify = trades[:max_trades]
        print(f"üìä Verificando {len(trades_to_verify)} trades...")
        
        # 2. Obtener datos reales de Binance para el per√≠odo
        print(f"üì° Obteniendo datos reales de Binance...")
        real_data = self._get_real_data_for_period(symbol, timeframe, trades_to_verify)
        
        if real_data is None or real_data.empty:
            print("‚ùå No se pudieron obtener datos reales")
            return
        
        # 3. Verificar cada trade
        self._verify_trades(trades_to_verify, real_data, symbol)
        
    def _run_backtest(self, symbol: str, timeframe: str) -> List[Dict]:
        """Ejecutar backtest real y obtener trades."""
        try:
            # Configurar simulador con par√°metros correctos
            simulator = FuturesSimulator(
                initial_balance=FUTURES_CONFIG['initial_balance'],
                leverage=FUTURES_CONFIG['leverage'],
                position_size_usd=FUTURES_CONFIG['initial_balance']  # Usar todo el balance
            )
            
            # Cargar datos de cache 
            cache_file = f"data/cache_real/{symbol}_{timeframe}.json"
            if not os.path.exists(cache_file):
                print(f"‚ùå No existe archivo de cache: {cache_file}")
                return []
            
            # Ejecutar simulaci√≥n b√°sica
            print("üìä Ejecutando simulaci√≥n b√°sica...")
            trades = self._run_simple_simulation(simulator, cache_file, symbol, timeframe)
            
            if trades:
                print(f"‚úÖ Simulaci√≥n completada: {len(trades)} trades generados")
                return trades
            else:
                print("‚ùå La simulaci√≥n no gener√≥ trades")
                return []
                
        except Exception as e:
            print(f"‚ùå Error ejecutando backtest: {e}")
            return []
    
    def _run_simple_simulation(self, simulator: FuturesSimulator, cache_file: str, 
                              symbol: str, timeframe: str) -> List[Dict]:
        """Ejecutar simulaci√≥n simple sin an√°lisis t√©cnico complejo."""
        try:
            # Cargar datos
            with open(cache_file, 'r', encoding='utf-8') as f:
                cache = json.load(f)
            
            if 'data' in cache:
                data_list = cache['data']
            else:
                data_list = cache
            
            # Convertir a DataFrame
            df = pd.DataFrame(data_list)
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            df.set_index('timestamp', inplace=True)
            
            # Renombrar columnas
            df = df.rename(columns={
                'open': 'Open',
                'high': 'High', 
                'low': 'Low',
                'close': 'Close',
                'volume': 'Volume'
            })
            
            print(f"üìà Datos cargados: {len(df)} velas desde {df.index[0]} hasta {df.index[-1]}")
            
            # Simulaci√≥n simple: entradas cada X velas
            trades = []
            entry_interval = max(10, len(df) // 20)  # Entradas espaciadas
            
            for i in range(0, len(df) - 5, entry_interval):
                try:
                    if len(trades) >= 15:  # L√≠mite de trades
                        break
                    
                    entry_candle = df.iloc[i]
                    exit_candle = df.iloc[i + 3]  # Salir 3 velas despu√©s
                    
                    entry_price = float(entry_candle['Close'])
                    exit_price = float(exit_candle['Close'])
                    
                    # Simular decisi√≥n de entrada (simple momentum)
                    price_change = (entry_price - df.iloc[i-1]['Close']) / df.iloc[i-1]['Close']
                    
                    if price_change > 0.005:  # Si subi√≥ >0.5%, entrar LONG
                        side = 'LONG'
                        # Simular TP/SL
                        if (exit_price - entry_price) / entry_price > 0.02:
                            exit_price = entry_price * 1.02  # TP en +2%
                            reason = "TP"
                        elif (exit_price - entry_price) / entry_price < -0.035:
                            exit_price = entry_price * 0.965  # Liquidaci√≥n
                            reason = "LIQUIDATION" 
                        else:
                            reason = "MANUAL"
                        
                        # Calcular P&L
                        pnl_pct = (exit_price - entry_price) / entry_price
                        pnl = pnl_pct * FUTURES_CONFIG['initial_balance'] * FUTURES_CONFIG['leverage']
                        
                        trade = {
                            'id': f"SIM_{len(trades)+1}",
                            'symbol': symbol,
                            'side': side,
                            'entry_time': entry_candle.name.isoformat(),
                            'exit_time': exit_candle.name.isoformat(),
                            'entry_price': entry_price,
                            'exit_price': exit_price,
                            'size_usd': FUTURES_CONFIG['initial_balance'],
                            'leverage': FUTURES_CONFIG['leverage'],
                            'pnl': pnl,
                            'reason': reason
                        }
                        
                        trades.append(trade)
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è Error en vela {i}: {e}")
                    continue
            
            return trades
            
        except Exception as e:
            print(f"‚ùå Error en simulaci√≥n simple: {e}")
            return []
    
    def _get_real_data_for_period(self, symbol: str, timeframe: str, trades: List[Dict]) -> Optional[pd.DataFrame]:
        """Obtener datos reales que cubran el per√≠odo de los trades."""
        try:
            if not trades:
                return None
            
            # Encontrar rango de fechas de los trades
            trade_times = []
            for trade in trades:
                if 'entry_time' in trade:
                    trade_times.append(pd.to_datetime(trade['entry_time']))
                if 'exit_time' in trade:
                    trade_times.append(pd.to_datetime(trade['exit_time']))
            
            if not trade_times:
                print("‚ùå No se encontraron timestamps en los trades")
                return None
            
            start_time = min(trade_times) - timedelta(hours=24)  # Buffer
            end_time = max(trade_times) + timedelta(hours=24)    # Buffer
            
            print(f"üìÖ Per√≠odo de trades: {start_time} a {end_time}")
            
            # Convertir timeframe
            tf_map = {'1h': '1h', '4h': '4h', '1d': '1d'}
            interval = tf_map.get(timeframe, '4h')
            
            # Calcular l√≠mite de velas necesarias
            if timeframe == '1h':
                limit = min(1000, int((end_time - start_time).total_seconds() / 3600) + 50)
            elif timeframe == '4h':
                limit = min(1000, int((end_time - start_time).total_seconds() / 14400) + 50)
            else:  # 1d
                limit = min(1000, int((end_time - start_time).days) + 50)
            
            # API call
            params = {
                'symbol': symbol,
                'interval': interval,
                'limit': limit,
                'startTime': int(start_time.timestamp() * 1000),
                'endTime': int(end_time.timestamp() * 1000)
            }
            
            response = requests.get(self.binance_api, params=params, timeout=15)
            
            if response.status_code != 200:
                print(f"‚ùå Error API Binance: {response.status_code}")
                return None
            
            data = response.json()
            
            if not data:
                print("‚ùå No se recibieron datos de Binance")
                return None
            
            # Convertir a DataFrame
            df = pd.DataFrame(data, columns=[
                'timestamp', 'Open', 'High', 'Low', 'Close', 'Volume',
                'close_time', 'quote_volume', 'trades', 'taker_buy_base',
                'taker_buy_quote', 'ignore'
            ])
            
            # Procesar timestamps y precios
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            
            # Convertir a float
            for col in ['Open', 'High', 'Low', 'Close', 'Volume']:
                df[col] = df[col].astype(float)
            
            print(f"‚úÖ Datos reales obtenidos: {len(df)} velas")
            print(f"   Rango: {df.index[0]} a {df.index[-1]}")
            
            return df[['Open', 'High', 'Low', 'Close', 'Volume']]
            
        except Exception as e:
            print(f"‚ùå Error obteniendo datos reales: {e}")
            return None
    
    def _verify_trades(self, trades: List[Dict], real_data: pd.DataFrame, symbol: str):
        """Verificar trades contra datos reales."""
        print(f"\nüîç VERIFICANDO {len(trades)} TRADES CONTRA DATOS REALES")
        print("=" * 60)
        
        verified_count = 0
        total_price_diff = 0
        impossible_trades = []
        
        for i, trade in enumerate(trades, 1):
            print(f"\nüìã TRADE #{i}: {trade.get('side', 'UNKNOWN')} ${trade.get('size_usd', 0)}")
            
            entry_time = pd.to_datetime(trade.get('entry_time'))
            exit_time = pd.to_datetime(trade.get('exit_time'))
            entry_price = float(trade.get('entry_price', 0))
            exit_price = float(trade.get('exit_price', 0))
            pnl = trade.get('pnl', 0)
            reason = trade.get('reason', 'UNKNOWN')
            
            print(f"   üïê {entry_time} ‚Üí {exit_time}")
            print(f"   üí∞ P&L: ${pnl:.2f} ({reason})")
            
            # Verificar precios
            entry_valid, entry_diff = self._verify_price_at_time(
                real_data, entry_time, entry_price, "ENTRADA"
            )
            
            exit_valid, exit_diff = self._verify_price_at_time(
                real_data, exit_time, exit_price, "SALIDA"
            )
            
            # Verificar trayectoria de precios
            path_valid = self._verify_price_path(
                real_data, entry_time, exit_time, entry_price, exit_price, trade
            )
            
            # Evaluaci√≥n del trade
            if entry_valid and exit_valid and path_valid:
                verified_count += 1
                total_price_diff += (entry_diff + exit_diff) / 2
                print(f"   ‚úÖ TRADE VERIFICADO")
            else:
                impossible_trades.append({
                    'trade_num': i,
                    'entry_valid': entry_valid,
                    'exit_valid': exit_valid,
                    'path_valid': path_valid,
                    'trade': trade
                })
                print(f"   ‚ùå TRADE CUESTIONABLE")
        
        # Resumen final
        self._print_verification_summary(
            trades, verified_count, total_price_diff, impossible_trades, symbol
        )
    
    def _verify_price_at_time(self, real_data: pd.DataFrame, target_time: datetime, 
                             price: float, label: str) -> Tuple[bool, float]:
        """Verificar si un precio era alcanzable en un momento espec√≠fico."""
        try:
            # Buscar vela m√°s cercana (tolerancia de 30 minutos)
            time_tolerance = pd.Timedelta(minutes=30)
            mask = abs(real_data.index - target_time) <= time_tolerance
            candidates = real_data[mask]
            
            if candidates.empty:
                print(f"   ‚ö†Ô∏è {label}: No hay datos reales cerca de {target_time}")
                return False, 0.0
            
            # Tomar la vela m√°s cercana
            closest_idx = (candidates.index - target_time).abs().idxmin()
            closest_candle = real_data.loc[closest_idx]
            
            # Verificar si el precio est√° en el rango OHLC
            low, high = closest_candle['Low'], closest_candle['High']
            close_price = closest_candle['Close']
            
            if low <= price <= high:
                diff_pct = abs(price - close_price) / close_price * 100
                print(f"   ‚úÖ {label}: ${price:.4f} v√°lido (Close: ${close_price:.4f}, diff: {diff_pct:.2f}%)")
                return True, diff_pct
            else:
                print(f"   ‚ùå {label}: ${price:.4f} fuera de rango [${low:.4f}-${high:.4f}]")
                return False, 0.0
                
        except Exception as e:
            print(f"   ‚ùå {label}: Error - {e}")
            return False, 0.0
    
    def _verify_price_path(self, real_data: pd.DataFrame, entry_time: datetime, 
                          exit_time: datetime, entry_price: float, exit_price: float,
                          trade: Dict) -> bool:
        """Verificar que la trayectoria del precio durante el trade es realista."""
        try:
            # Obtener datos del per√≠odo del trade
            mask = (real_data.index >= entry_time) & (real_data.index <= exit_time)
            period_data = real_data[mask]
            
            if period_data.empty:
                return True  # No podemos verificar, asumimos v√°lido
            
            min_period = period_data['Low'].min()
            max_period = period_data['High'].max()
            
            # Para trades largos
            if trade.get('side') == 'LONG':
                # El precio de salida debe haber sido alcanzado
                if min_period <= exit_price <= max_period:
                    print(f"   ‚úÖ TRAYECTORIA: Exit ${exit_price:.4f} alcanzable")
                    return True
                else:
                    print(f"   ‚ùå TRAYECTORIA: Exit ${exit_price:.4f} no alcanzable")
                    return False
            
            return True  # Para otros casos, asumimos v√°lido
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è Error verificando trayectoria: {e}")
            return True
    
    def _print_verification_summary(self, trades: List[Dict], verified_count: int,
                                   total_price_diff: float, impossible_trades: List,
                                   symbol: str):
        """Imprimir resumen de verificaci√≥n."""
        print(f"\nüèÜ RESUMEN DE VERIFICACI√ìN - {symbol}")
        print("=" * 60)
        print(f"   üìä Trades verificados: {verified_count}/{len(trades)}")
        print(f"   üìà Tasa de verificaci√≥n: {verified_count/len(trades)*100:.1f}%")
        
        if verified_count > 0:
            avg_price_diff = total_price_diff / verified_count
            print(f"   üíπ Diferencia promedio de precios: {avg_price_diff:.3f}%")
        
        # Evaluaci√≥n final
        verification_rate = verified_count / len(trades)
        
        if verification_rate >= 0.8:
            if verified_count > 0 and total_price_diff / verified_count < 0.5:
                print(f"\n   üéØ EVALUACI√ìN: ALTAMENTE CONFIABLE")
                print(f"      Los trades son realistas y verificables")
            else:
                print(f"\n   ‚ö†Ô∏è  EVALUACI√ìN: MODERADAMENTE CONFIABLE")
                print(f"      Los trades son posibles pero hay diferencias")
        elif verification_rate >= 0.5:
            print(f"\n   ‚ö° EVALUACI√ìN: PARCIALMENTE CONFIABLE")
            print(f"      Algunos trades son cuestionables")
        else:
            print(f"\n   ‚ùå EVALUACI√ìN: ALTAMENTE CUESTIONABLE")
            print(f"      Demasiados trades no verificables")
        
        # Mostrar trades problem√°ticos
        if impossible_trades:
            print(f"\nüö® TRADES PROBLEM√ÅTICOS:")
            for prob in impossible_trades[:3]:  # Mostrar m√°ximo 3
                print(f"   Trade #{prob['trade_num']}: ", end="")
                issues = []
                if not prob['entry_valid']:
                    issues.append("entrada inv√°lida")
                if not prob['exit_valid']:
                    issues.append("salida inv√°lida")
                if not prob['path_valid']:
                    issues.append("trayectoria imposible")
                print(", ".join(issues))

def main():
    """Funci√≥n principal."""
    import argparse
    
    parser = argparse.ArgumentParser(description="Verificador de Backtests Reales")
    parser.add_argument('symbol', help='S√≠mbolo crypto (ej: XRPUSDT)')
    parser.add_argument('--timeframe', default='4h', help='Timeframe (1h, 4h, 1d)')
    parser.add_argument('--max-trades', type=int, default=10, help='M√°ximo trades a verificar')
    
    args = parser.parse_args()
    
    verifier = BacktestVerifier()
    verifier.run_and_verify(args.symbol, args.timeframe, args.max_trades)

if __name__ == "__main__":
    main()