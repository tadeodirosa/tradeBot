#!/usr/bin/env python3
"""
An√°lisis de Condiciones de Trading LINK
======================================

Analizamos las condiciones exitosas del simulador anterior para LINK
y las adaptamos al nuevo sistema verificado manteniendo la fiabilidad.
"""

import ccxt
import pandas as pd
import numpy as np
import json
from datetime import datetime, timedelta
from typing import Dict, List, Tuple

try:
    import talib as ta
    TALIB_AVAILABLE = True
except ImportError:
    TALIB_AVAILABLE = False

class TradingConditionsAnalyzer:
    """Analizador de condiciones de trading para recuperar generaci√≥n de se√±ales."""
    
    def __init__(self, symbol: str = 'LINK/USDT'):
        self.symbol = symbol
        
        self.exchange = ccxt.binance({
            'apiKey': '', 'secret': '', 'sandbox': False,
            'enableRateLimit': True, 'timeout': 30000,
        })
        
        print("üîç AN√ÅLISIS DE CONDICIONES DE TRADING")
        print("=" * 50)
        print(f"üìä S√≠mbolo: {self.symbol}")
        print(f"üéØ Objetivo: Recuperar generaci√≥n de trades")
        print("=" * 50)
    
    def get_historical_data(self, days: int = 30) -> pd.DataFrame:
        """Obtener datos hist√≥ricos para an√°lisis."""
        limit = days * 6  # Aproximadamente 6 barras de 4h por d√≠a
        
        ohlcv = self.exchange.fetch_ohlcv(self.symbol, '4h', limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        
        print(f"‚úÖ Datos hist√≥ricos: {len(df)} registros")
        print(f"üìÖ Rango: {df.index[0]} a {df.index[-1]}")
        
        return df
    
    def calculate_corrected_indicators(self, df: pd.DataFrame) -> Dict:
        """Calcular indicadores corregidos con m√©todo Wilder."""
        close = df['close'].values
        high = df['high'].values
        low = df['low'].values
        
        indicators = {}
        
        # ATR corregido (m√©todo Wilder)
        tr_values = []
        for i in range(1, len(df)):
            tr1 = high[i] - low[i]
            tr2 = abs(high[i] - close[i-1])
            tr3 = abs(low[i] - close[i-1])
            tr_values.append(max(tr1, tr2, tr3))
        
        if len(tr_values) >= 14:
            # ATR Wilder
            first_atr = np.mean(tr_values[:14])
            atr_current = first_atr
            for i in range(14, len(tr_values)):
                atr_current = (atr_current * 13 + tr_values[i]) / 14
            
            indicators['atr'] = atr_current
            indicators['atr_percentage'] = (atr_current / close[-1]) * 100
        
        # RSI corregido (m√©todo Wilder)
        if len(close) >= 15:
            deltas = np.diff(close)
            gains = np.where(deltas > 0, deltas, 0)
            losses = np.where(deltas < 0, -deltas, 0)
            
            # Primera media
            avg_gain = np.mean(gains[:14])
            avg_loss = np.mean(losses[:14])
            
            # Smoothing Wilder
            for i in range(14, len(gains)):
                avg_gain = (avg_gain * 13 + gains[i]) / 14
                avg_loss = (avg_loss * 13 + losses[i]) / 14
            
            rs = avg_gain / avg_loss if avg_loss != 0 else float('inf')
            indicators['rsi'] = 100 - (100 / (1 + rs))
        
        # EMAs
        close_series = df['close']
        indicators['ema_9'] = close_series.ewm(span=9).mean().iloc[-1]
        indicators['ema_21'] = close_series.ewm(span=21).mean().iloc[-1]
        indicators['ema_50'] = close_series.ewm(span=50).mean().iloc[-1]
        
        # SMAs
        indicators['sma_20'] = close_series.rolling(20).mean().iloc[-1]
        indicators['sma_50'] = close_series.rolling(50).mean().iloc[-1]
        
        # Precio actual
        indicators['current_price'] = close[-1]
        
        return indicators
    
    def analyze_trading_conditions(self, df: pd.DataFrame) -> Dict:
        """Analizar condiciones de trading hist√≥ricas para encontrar patrones exitosos."""
        
        print(f"\nüìä ANALIZANDO CONDICIONES HIST√ìRICAS")
        print("-" * 40)
        
        # Calcular indicadores para todo el per√≠odo
        signals_generated = []
        
        for i in range(50, len(df)):  # Empezar despu√©s de 50 barras para indicadores
            # Datos hasta la barra actual
            current_data = df.iloc[:i+1]
            indicators = self.calculate_corrected_indicators(current_data)
            
            if not indicators:
                continue
            
            current_price = indicators['current_price']
            rsi = indicators.get('rsi', 50)
            atr_pct = indicators.get('atr_percentage', 2)
            ema_9 = indicators.get('ema_9', current_price)
            ema_21 = indicators.get('ema_21', current_price)
            ema_50 = indicators.get('ema_50', current_price)
            
            # Condiciones RELAJADAS para generar m√°s se√±ales
            signal_type = None
            signal_strength = 0
            reasons = []
            
            # LONG conditions (m√°s permisivas)
            long_score = 0
            if current_price > ema_21:
                long_score += 1
                reasons.append("Precio > EMA21")
            
            if ema_9 > ema_21:
                long_score += 1
                reasons.append("EMA9 > EMA21")
            
            if rsi < 50:  # RSI bajo la media
                long_score += 1
                reasons.append(f"RSI oversold tendency ({rsi:.1f})")
            
            if atr_pct > 1.0:  # Volatilidad m√≠nima
                long_score += 1
                reasons.append("Volatilidad adecuada")
            
            # SHORT conditions (m√°s permisivas)
            short_score = 0
            if current_price < ema_21:
                short_score += 1
                reasons.append("Precio < EMA21")
            
            if ema_9 < ema_21:
                short_score += 1
                reasons.append("EMA9 < EMA21")
            
            if rsi > 50:  # RSI arriba de la media
                short_score += 1
                reasons.append(f"RSI overbought tendency ({rsi:.1f})")
            
            # Generar se√±al con menor umbral (2 condiciones en lugar de 3)
            if long_score >= 2:
                signal_type = 'LONG'
                signal_strength = long_score * 25
            elif short_score >= 2:
                signal_type = 'SHORT'
                signal_strength = short_score * 25
            
            if signal_type:
                signals_generated.append({
                    'timestamp': current_data.index[-1],
                    'bar_index': i,
                    'signal_type': signal_type,
                    'strength': signal_strength,
                    'price': current_price,
                    'rsi': rsi,
                    'atr_pct': atr_pct,
                    'ema_9': ema_9,
                    'ema_21': ema_21,
                    'reasons': reasons.copy()
                })
                
                reasons.clear()  # Limpiar para pr√≥xima iteraci√≥n
        
        print(f"‚úÖ Se√±ales generadas con condiciones relajadas: {len(signals_generated)}")
        
        if signals_generated:
            # Estad√≠sticas
            long_signals = [s for s in signals_generated if s['signal_type'] == 'LONG']
            short_signals = [s for s in signals_generated if s['signal_type'] == 'SHORT']
            
            print(f"   üìà Se√±ales LONG: {len(long_signals)}")
            print(f"   üìâ Se√±ales SHORT: {len(short_signals)}")
            
            # Mostrar √∫ltimas 5 se√±ales
            print(f"\nüéØ √öLTIMAS 5 SE√ëALES:")
            for signal in signals_generated[-5:]:
                timestamp = signal['timestamp'].strftime('%Y-%m-%d %H:%M')
                print(f"   {signal['signal_type']} | {timestamp} | ${signal['price']:.4f} | RSI: {signal['rsi']:.1f}")
        
        return {
            'total_signals': len(signals_generated),
            'long_signals': len([s for s in signals_generated if s['signal_type'] == 'LONG']),
            'short_signals': len([s for s in signals_generated if s['signal_type'] == 'SHORT']),
            'signals': signals_generated[-10:]  # √öltimas 10 se√±ales
        }
    
    def test_current_conditions(self, df: pd.DataFrame) -> Dict:
        """Probar condiciones actuales para generar se√±al."""
        
        print(f"\nüéØ PROBANDO CONDICIONES ACTUALES")
        print("-" * 40)
        
        indicators = self.calculate_corrected_indicators(df)
        
        if not indicators:
            return {'signal': None, 'reason': 'Indicadores insuficientes'}
        
        current_price = indicators['current_price']
        rsi = indicators.get('rsi', 50)
        atr_pct = indicators.get('atr_percentage', 2)
        ema_9 = indicators.get('ema_9', current_price)
        ema_21 = indicators.get('ema_21', current_price)
        ema_50 = indicators.get('ema_50', current_price)
        
        print(f"üí∞ Precio actual: ${current_price:.4f}")
        print(f"üìä RSI: {rsi:.2f}")
        print(f"üìà ATR: {atr_pct:.2f}%")
        print(f"üìä EMA9: ${ema_9:.4f}")
        print(f"üìä EMA21: ${ema_21:.4f}")
        print(f"üìä EMA50: ${ema_50:.4f}")
        
        # Condiciones RELAJADAS
        signal_type = None
        reasons = []
        confidence = 0
        
        # LONG conditions
        long_score = 0
        if current_price > ema_21:
            long_score += 1
            reasons.append("‚úÖ Precio > EMA21")
        else:
            reasons.append("‚ùå Precio < EMA21")
        
        if ema_9 > ema_21:
            long_score += 1
            reasons.append("‚úÖ EMA9 > EMA21 (tendencia alcista)")
        else:
            reasons.append("‚ùå EMA9 < EMA21")
        
        if rsi < 50:
            long_score += 1
            reasons.append(f"‚úÖ RSI undersold tendency ({rsi:.1f})")
        else:
            reasons.append(f"‚ùå RSI oversold tendency ({rsi:.1f})")
        
        if atr_pct > 1.0:
            long_score += 1
            reasons.append(f"‚úÖ Volatilidad adecuada ({atr_pct:.2f}%)")
        else:
            reasons.append(f"‚ùå Volatilidad baja ({atr_pct:.2f}%)")
        
        print(f"\nüìä EVALUACI√ìN LONG:")
        for reason in reasons:
            print(f"   {reason}")
        
        print(f"\nüìä Score LONG: {long_score}/4")
        
        if long_score >= 2:  # Umbral relajado
            signal_type = 'LONG'
            confidence = long_score * 25
            
            # Calcular niveles
            atr_value = indicators.get('atr', current_price * 0.02)
            stop_loss = current_price - (atr_value * 1.5)
            take_profit = current_price + (atr_value * 2.0)
            
            return {
                'signal': 'LONG',
                'confidence': confidence,
                'entry_price': current_price,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'indicators': indicators,
                'reasons': reasons
            }
        
        # Si no hay LONG, evaluar SHORT
        reasons.clear()
        short_score = 0
        
        if current_price < ema_21:
            short_score += 1
            reasons.append("‚úÖ Precio < EMA21")
        else:
            reasons.append("‚ùå Precio > EMA21")
        
        if ema_9 < ema_21:
            short_score += 1
            reasons.append("‚úÖ EMA9 < EMA21 (tendencia bajista)")
        else:
            reasons.append("‚ùå EMA9 > EMA21")
        
        if rsi > 50:
            short_score += 1
            reasons.append(f"‚úÖ RSI overbought tendency ({rsi:.1f})")
        else:
            reasons.append(f"‚ùå RSI undersold tendency ({rsi:.1f})")
        
        print(f"\nüìä EVALUACI√ìN SHORT:")
        for reason in reasons:
            print(f"   {reason}")
        
        print(f"\nüìä Score SHORT: {short_score}/3")
        
        if short_score >= 2:
            signal_type = 'SHORT'
            confidence = short_score * 25
            
            # Calcular niveles
            atr_value = indicators.get('atr', current_price * 0.02)
            stop_loss = current_price + (atr_value * 1.5)
            take_profit = current_price - (atr_value * 2.0)
            
            return {
                'signal': 'SHORT',
                'confidence': confidence,
                'entry_price': current_price,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'indicators': indicators,
                'reasons': reasons
            }
        
        return {
            'signal': 'HOLD',
            'confidence': 0,
            'reason': 'No se cumplen condiciones m√≠nimas',
            'indicators': indicators,
            'long_score': long_score,
            'short_score': short_score
        }
    
    def run_analysis(self):
        """Ejecutar an√°lisis completo."""
        # Obtener datos
        df = self.get_historical_data(30)
        
        # Analizar condiciones hist√≥ricas
        historical_analysis = self.analyze_trading_conditions(df)
        
        # Probar condiciones actuales
        current_analysis = self.test_current_conditions(df)
        
        print(f"\nüéØ RESUMEN DEL AN√ÅLISIS")
        print("=" * 50)
        print(f"üìä Se√±ales hist√≥ricas (30 d√≠as): {historical_analysis['total_signals']}")
        print(f"üìà LONG: {historical_analysis['long_signals']}")
        print(f"üìâ SHORT: {historical_analysis['short_signals']}")
        
        if current_analysis['signal'] != 'HOLD':
            print(f"\nüöÄ SE√ëAL ACTUAL: {current_analysis['signal']}")
            print(f"üìä Confianza: {current_analysis['confidence']}%")
            print(f"üí∞ Entrada: ${current_analysis['entry_price']:.4f}")
            print(f"üõ°Ô∏è Stop Loss: ${current_analysis['stop_loss']:.4f}")
            print(f"üéØ Take Profit: ${current_analysis['take_profit']:.4f}")
        else:
            print(f"\n‚è∏Ô∏è Sin se√±al actual - Condiciones insuficientes")
            print(f"üìä Long score: {current_analysis['long_score']}/4")
            print(f"üìä Short score: {current_analysis['short_score']}/3")
        
        return {
            'historical': historical_analysis,
            'current': current_analysis
        }

def main():
    """Funci√≥n principal."""
    try:
        analyzer = TradingConditionsAnalyzer('LINK/USDT')
        results = analyzer.run_analysis()
        
        # Guardar resultados
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"trading_conditions_analysis_{timestamp}.json"
        
        with open(filename, 'w') as f:
            json.dump(results, f, indent=2, default=str)
        
        print(f"\nüíæ An√°lisis guardado en: {filename}")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    main()