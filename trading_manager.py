"""
Trading Signal Manager - Interfaz Unificada
Combina an√°lisis en tiempo real + tracking de performance + backtesting
"""

import sys
import subprocess
from real_time_analyzer import RealTimeAnalyzer
from signal_tracker import SignalTracker

def main():
    print("üöÄ TRADING SIGNAL MANAGER")
    print("=" * 50)
    print("1. üìä Analizar se√±al (LINK por defecto)")
    print("2. üìà Analizar otro s√≠mbolo")
    print("3. üîÑ Actualizar se√±ales activas")
    print("4. üìã Ver performance del modelo")
    print("5. üëÄ Ver se√±ales activas")
    print("6. üéØ An√°lisis completo (se√±al + update)")
    print("7. üìê Ejecutar backtest")
    print("8. üî¨ Backtest + an√°lisis en tiempo real")
    print("=" * 50)
    
    choice = input("Elige opci√≥n (1-8): ").strip()
    
    if choice == "1":
        # Analizar LINK
        analyzer = RealTimeAnalyzer()
        try:
            result = analyzer.analyze_signal("LINKUSDT")
            analyzer.print_signal_report(result)
        except Exception as e:
            print(f"‚ùå Error: {e}")
    
    elif choice == "2":
        # Analizar otro s√≠mbolo
        symbol = input("S√≠mbolo (ej: BTCUSDT, ETHUSDT): ").strip().upper()
        if not symbol.endswith("USDT"):
            symbol += "USDT"
        
        analyzer = RealTimeAnalyzer()
        try:
            result = analyzer.analyze_signal(symbol)
            analyzer.print_signal_report(result)
        except Exception as e:
            print(f"‚ùå Error: {e}")
    
    elif choice == "3":
        # Actualizar se√±ales
        tracker = SignalTracker()
        tracker.update_active_signals()
    
    elif choice == "4":
        # Ver performance
        tracker = SignalTracker()
        tracker.print_performance_report()
    
    elif choice == "5":
        # Ver se√±ales activas
        tracker = SignalTracker()
        tracker.print_active_signals()
    
    elif choice == "6":
        # An√°lisis completo
        print("\nüéØ AN√ÅLISIS COMPLETO")
        print("-" * 30)
        
        # 1. Actualizar se√±ales existentes
        print("1Ô∏è‚É£ Actualizando se√±ales activas...")
        tracker = SignalTracker()
        tracker.update_active_signals()
        
        # 2. Analizar nueva se√±al
        print("\n2Ô∏è‚É£ Analizando nueva se√±al LINK...")
        analyzer = RealTimeAnalyzer()
        try:
            result = analyzer.analyze_signal("LINKUSDT")
            analyzer.print_signal_report(result)
        except Exception as e:
            print(f"‚ùå Error en an√°lisis: {e}")
        
        # 3. Mostrar performance
        print("\n3Ô∏è‚É£ Performance del modelo:")
        tracker.print_performance_report()
        
        # 4. Mostrar se√±ales activas
        print("\n4Ô∏è‚É£ Estado actual:")
        tracker.print_active_signals()
    
    elif choice == "7":
        # Ejecutar backtest
        print("\nüìê EJECUTANDO BACKTESTER")
        print("-" * 30)
        try:
            # Ejecutar el backtester como proceso separado para mantener la interactividad
            result = subprocess.run([sys.executable, "verified_backtester.py"], 
                                  capture_output=False, text=True)
            if result.returncode == 0:
                print("\n‚úÖ Backtest completado exitosamente")
            else:
                print("\n‚ùå Error en el backtest")
        except Exception as e:
            print(f"‚ùå Error ejecutando backtest: {e}")
    
    elif choice == "8":
        # Backtest + an√°lisis en tiempo real
        print("\nüî¨ AN√ÅLISIS COMPLETO: BACKTEST + TIEMPO REAL")
        print("-" * 50)
        
        # 1. Ejecutar backtest
        print("1Ô∏è‚É£ Ejecutando backtest hist√≥rico...")
        try:
            result = subprocess.run([sys.executable, "verified_backtester.py"], 
                                  capture_output=False, text=True)
            if result.returncode != 0:
                print("‚ö†Ô∏è Error en backtest, continuando con an√°lisis en tiempo real...")
        except Exception as e:
            print(f"‚ö†Ô∏è Error en backtest: {e}, continuando...")
        
        print("\n" + "="*50)
        
        # 2. An√°lisis en tiempo real
        print("2Ô∏è‚É£ An√°lisis en tiempo real...")
        analyzer = RealTimeAnalyzer()
        try:
            result = analyzer.analyze_signal("LINKUSDT")
            analyzer.print_signal_report(result)
        except Exception as e:
            print(f"‚ùå Error en an√°lisis: {e}")
        
        # 3. Mostrar tracking
        print("\n3Ô∏è‚É£ Estado del tracking:")
        tracker = SignalTracker()
        tracker.update_active_signals()
        tracker.print_performance_report()
    
    else:
        print("‚ùå Opci√≥n inv√°lida")

if __name__ == "__main__":
    main()